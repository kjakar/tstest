grammar gram;

WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip ;
COMMENT : '/''/'~[\n]* -> skip;
SEMI : ';' ;
WHILE : 'while' ;
LP : '(' ;
RP : ')' ;
IF : 'if' ;
ELSE : 'else' ;
RETURN : 'return' ;
LBR : '{' ;
RBR : '}' ;
NUM : [0-9]+ ;
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][\-+]?[0-9]+)? | [\\]'-'?[0-9]+[Ee][\-+]?[0-9]+ ;
OR : 'or' ;
AND : 'and' ;
NOT : 'not' ;
RELOP : '>''='|'<''='|'>'|'<'|'!''='|'=''=' ;
EQ : '=' ;
PLUS : '+' ;
MULOP : '*' | '%' | '/';
MINUS : '-' ;
CMA : ',' ;
TYPE : ('int'|'string'|'double') ;
STRINGCONSTANT : '"' ('\\"'| '\n'|'\\'| ~["])* '"' ;
PRINT : 'print' ;
INPUT : 'input' ;
OPEN : 'open' ;
READ : 'read' ;
WRITE : 'write' ;
CLOSE : 'close' ;
ID : [A-Za-z_][A-Za-z0-9_]* ;

start : varDeclList braceblock EOF ;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI | assign SEMI | funcCall SEMI ;
loop : WHILE LP expr RP braceblock ;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock ;
braceblock : LBR stmts RBR ;
returnStmt : RETURN expr ;
expr : orexp ;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp ;
notexp :  NOT notexp | rel ;
rel : sum RELOP sum | sum ;
sum :  sum PLUS term | sum MINUS term | term ;
term :  term MULOP neg | neg ;
neg :  MINUS neg | factor ;
factor :  NUM | LP expr RP | ID | STRINGCONSTANT | funcCall | FPNUM; //
varDeclList : varDecl SEMI varDeclList | ;
varDecl : TYPE ID ;
assign : ID EQ expr ;
funcCall : builtinFuncCall | userFuncCall ;
userFuncCall : ID LP optionalExprlist RP ;
optionalExprlist : exprlist | ;
exprlist : exprlist CMA expr | expr ;
builtinFuncCall : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP ;